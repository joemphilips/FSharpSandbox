module PinetreeShop.Domain.Products.ReadModel

open System
open PinetreeCQRS.Infrastructure.Types
open PinetreeCQRS.Infrastructure.Events
open PinetreeCQRS.Persistance.SqlServer
open PinetreeShop.Domain.Products.ProductAggregate

open FSharp.Data.Sql

open System.Linq
open System.Diagnostics

type ProductDTO = {
    Id: Guid
    Name: string
    Price: decimal
    Quantity: int
    Reserved: int
}

module private DataAccess =
    type dbSchema = unit /// must be generated by SqlDataProvider in real situation

    let ctx = ()


    let insertProduct (event: EventEnvelope<Event>) name price: RResult<Event> =
        let (AggregateId id) = event.AggregateId
        let newProduct = ctx
        failwith "not impl"

    let updateQuantityAndReserved (event :EventEnvelope<Event>) qDiff rDiff =
        failwith ""